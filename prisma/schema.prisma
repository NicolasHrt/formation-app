generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@index([providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  courses       Course[]
  sessions      Session[]

  @@index([email])
  @@index([emailVerified])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  modules     Module[]

  @@index([authorId])
  @@index([slug])
  @@index([createdAt])
  @@index([updatedAt])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videos      Video[]

  @@index([courseId])
  @@index([order])
  @@index([createdAt])
  @@index([updatedAt])
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String
  videoUrl    String
  thumbnailUrl String?
  duration    Int?     // Dur√©e en secondes
  size        Int?     // Taille en octets
  order       Int
  moduleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([order])
  @@index([duration])
  @@index([createdAt])
  @@index([updatedAt])
}
